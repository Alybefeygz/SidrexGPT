"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
from datetime import timedelta
from decouple import config

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==============================================================================
# SECURITY SETTINGS
# ==============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required!")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Allowed hosts - production için mutlaka belirtilmeli
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: ['localhost', '127.0.0.1', 'sidrexgpt-backend.onrender.com'] + [h.strip() for h in v.split(',') if h.strip()])

# Trust the 'X-Forwarded-Proto' header from the reverse proxy (Render)
# This is crucial for secure cookies and HTTPS redirects to work correctly.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ==============================================================================
# GOOGLE DRIVE SERVICE ACCOUNT CONFIGURATION
# ==============================================================================

# Google Drive Klasör ID'si
GOOGLE_DRIVE_FOLDER_ID = config('GOOGLE_DRIVE_FOLDER_ID')

# Google Service Account Bilgileri - Environment Variables'tan al
GOOGLE_SERVICE_ACCOUNT_INFO = {
    'type': config('GOOGLE_SERVICE_ACCOUNT_TYPE', default='service_account'),
    'project_id': config('GOOGLE_PROJECT_ID', default=''),
    'private_key_id': config('GOOGLE_PRIVATE_KEY_ID', default=''),
    'private_key': config('GOOGLE_PRIVATE_KEY', default='').replace('\\n', '\n'),
    'client_email': config('GOOGLE_CLIENT_EMAIL', default=''),
    'client_id': config('GOOGLE_CLIENT_ID', default=''),
    'auth_uri': config('GOOGLE_AUTH_URI', default='https://accounts.google.com/o/oauth2/auth'),
    'token_uri': config('GOOGLE_TOKEN_URI', default='https://oauth2.googleapis.com/token'),
    'auth_provider_x509_cert_url': config('GOOGLE_AUTH_PROVIDER_X509_CERT_URL', default='https://www.googleapis.com/oauth2/v1/certs'),
    'client_x509_cert_url': config('GOOGLE_CLIENT_X509_CERT_URL', default=''),
    'universe_domain': config('GOOGLE_UNIVERSE_DOMAIN', default='googleapis.com')
}

# Legacy JSON dosyası desteği (backward compatibility)
GOOGLE_DRIVE_SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, config('GOOGLE_DRIVE_SERVICE_ACCOUNT_FILE_NAME', default='service_account.json'))

# Supabase Bucket Ayarları
SUPABASE_BUCKET_NAME = config('SUPABASE_BUCKET_NAME', default='sidrexgpt-bucket')

# Supabase Storage Ayarları (Statik Varlıklar İçin)
SUPABASE_URL = config('SUPABASE_URL', default='')
SUPABASE_KEY = config('SUPABASE_SERVICE_ROLE_KEY', default='')
SUPABASE_STATIC_BUCKET = config('SUPABASE_STATIC_BUCKET', default='sidrexgpt-bucket-static')

# ==============================================================================
# OPENROUTER API CONFIGURATION
# ==============================================================================

OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
OPENROUTER_BASE_URL = os.getenv('OPENROUTER_BASE_URL', 'https://openrouter.ai/api/v1')
OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL', 'meta-llama/llama-3.2-3b-instruct:free')

# Validate OpenRouter API Key
if not OPENROUTER_API_KEY:
    print("⚠️  WARNING: OPENROUTER_API_KEY is not set properly!")
    print("   Please set your OpenRouter API key in .env file")
    print("   Get your API key from: https://openrouter.ai/")

# ==============================================================================
# APPLICATION DEFINITION
# ==============================================================================

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Custom apps
    'profiller.apps.ProfillerConfig',
    'robots.apps.RobotsConfig',
    'medya.apps.MedyaConfig',
    'products.apps.ProductsConfig',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django.contrib.sites',
    'django_extensions',
    'corsheaders',
    'knox',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Veritabanı yapılandırması dj-database-url ile ortam değişkeninden okunur.
# Bu, Render gibi platformlarda esneklik sağlar.
DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600,
        ssl_require=os.getenv('DATABASE_SSL_REQUIRE', 'True').lower() == 'true'
    )
}

# ==============================================================================
# PASSWORD VALIDATION
# ==============================================================================

if DEBUG:
    # Development için daha esnek şifre kuralları
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 4,
            }
        },
    ]
else:
    # Production için tam güvenlik
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 8,
            }
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

# ==============================================================================
# INTERNATIONALIZATION
# ==============================================================================

LANGUAGE_CODE = 'tr-tr'
TIME_ZONE = 'Europe/Istanbul'
USE_I18N = True
USE_TZ = True

# ==============================================================================
# STATIC FILES CONFIGURATION
# ==============================================================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Whitenoise, S3 ayarları aktif olmadığında kullanılacak
STATICFILES_STORAGE = 'whitenoise.storage.WhiteNoiseStorage'

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / 'uploads'

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================

# Frontend URL
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')

# CORS allowed origins
CORS_ALLOWED_ORIGINS = [
    "https://sidrexgpt-frontend.onrender.com",  # Frontend URL'si
    "https://sidrexgpt-backend.onrender.com",   # Backend URL'si
]

if DEBUG:
    # Geliştirme ortamı için ek izinler
    CORS_ALLOWED_ORIGINS.extend([
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://127.0.0.1:3000",
        "http://localhost:3000",
    ])

# ==============================================================================
# SECURITY, CSRF & CORS CONFIGURATION
# ==============================================================================

# Production ortamında (DEBUG=False) HTTPS ve güvenlik ayarlarını zorunlu kıl
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SAMESITE = 'None'
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    
    # Render gibi ters proxy'ler için Django'ya HTTPS bağlantısına güvenmesini söyle.
    # Bu ayar, secure cookie'lerin doğru çalışması için kritiktir.
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Geliştirme ortamı için esnek ayarlar
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'

# CSRF için güvenilir kaynaklar. Hem backend'in hem de frontend'in domain'i eklenmelidir.
ADDITIONAL_TRUSTED_ORIGINS = config('ADDITIONAL_TRUSTED_ORIGINS', default='', cast=lambda v: [x.strip() for x in v.split(',') if x.strip()])
CSRF_TRUSTED_ORIGINS = [
    "https://sidrexgpt-backend.onrender.com",
    "https://sidrexgpt-frontend.onrender.com",
] + CORS_ALLOWED_ORIGINS + ADDITIONAL_TRUSTED_ORIGINS

# CSRF_TRUSTED_ORIGINS listesindeki muhtemel kopyaları temizle
CSRF_TRUSTED_ORIGINS = sorted(list(set(CSRF_TRUSTED_ORIGINS)))

# CSRF cookie'sine JavaScript'in erişimine izin ver (gerekliyse)
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_HTTPONLY = True # Oturum çerezini daha güvenli yapalım

# CORS Ayarları
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT']
CORS_ALLOW_HEADERS = ['accept', 'authorization', 'content-type', 'origin', 'x-csrftoken', 'x-requested-with']
CORS_EXPOSE_HEADERS = ['content-type', 'x-csrftoken', 'set-cookie']
CORS_PREFLIGHT_MAX_AGE = 86400

# Yapılandırma Bilgisini Yazdır
print("Security & CSRF Configuration:")
print(f"   - DEBUG Mode: {DEBUG}")
print(f"   - SESSION_COOKIE_SAMESITE: {SESSION_COOKIE_SAMESITE}")
print(f"   - CSRF_COOKIE_SAMESITE: {CSRF_COOKIE_SAMESITE}")
print(f"   - SESSION_COOKIE_SECURE: {SESSION_COOKIE_SECURE}")
print(f"   - CSRF_COOKIE_SECURE: {CSRF_COOKIE_SECURE}")
print(f"   - CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")

# ==============================================================================
# REST FRAMEWORK CONFIGURATION
# ==============================================================================

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'chat': '5/minute',  # Chat istekleri için rate limiting
    },
    'DEFAULT_TIMEOUT': 60  # 60 saniye
}

# ==============================================================================
# DJANGO ALLAUTH & REST AUTH CONFIGURATION
# ==============================================================================

# Authentication settings
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_REQUIRED = True  # Email hala gerekli ama giriş için değil
ACCOUNT_USERNAME_REQUIRED = True  # Kullanıcı adı zorunlu
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_METHODS = {'username'}  # Sadece kullanıcı adı ile giriş

# Login/Logout URLs
# Admin panel için varsayılan Django login URL'ini kullan
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/admin/login/'

# Session ayarları
SESSION_COOKIE_AGE = 1209600  # 2 hafta
SESSION_SAVE_EVERY_REQUEST = True  # Her istekte session'ı kaydet
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Tarayıcı kapanınca session silinmesin

# dj-rest-auth ayarları
REST_AUTH = {
    'USE_JWT': False, 
    'SESSION_LOGIN': True,
    'LOGIN_SERIALIZER': 'profiller.api.serializers.CustomLoginSerializer',
    'USER_DETAILS_SERIALIZER': 'profiller.api.serializers.ProfilSerializer',
}

# ==============================================================================
# KNOX CONFIGURATION
# ==============================================================================

REST_KNOX = {
    'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
    'AUTH_TOKEN_CHARACTER_LENGTH': 64,
    'TOKEN_TTL': timedelta(hours=12),
    'USER_SERIALIZER': 'knox.serializers.UserSerializer',
    'AUTO_REFRESH': True,
    'TOKEN_LIMIT_PER_USER': 10,
    'TOKEN_PREFIX': 'sidrex',
    
    # Cookie-based auth için Knox ayarları
    'AUTH_HEADER_PREFIX': 'Token',
    'COOKIE_NAME': 'sidrex_auth_token',
    'COOKIE_SAMESITE': 'Lax', # Use 'Strict' for better security if frontend is on same domain
}

# ==============================================================================
# FILE UPLOAD SETTINGS
# ==============================================================================

# File upload limits
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'robots.api': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# ==============================================================================
# DEFAULT CONFIGURATION
# ==============================================================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# EMAIL CONFIGURATION (Opsiyonel)
# ==============================================================================

if os.getenv('EMAIL_HOST'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ==============================================================================
# TIMEOUT SETTINGS
# ==============================================================================

# Gunicorn timeout settings
GUNICORN_TIMEOUT = 120  # 120 saniye

# Django request timeout
REQUEST_TIMEOUT = 60  # 60 saniye